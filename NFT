// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "erc721a/contracts/ERC721A.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract NFT is ERC721A, Ownable {
    using SafeMath for uint256;

    uint256 public fee = 0.00005 ether;
    uint256 public supply = 100000;
    string public baseURI = "";

    constructor() ERC721A("MIDAS", "MDS") {}


    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function mint(uint256 quantity) external payable {
        require(totalSupply().add(quantity) <= supply, "The requested mint quantity exceeds the supply.");
        require(fee.mul(quantity) <= msg.value, "Not enough ETH for mint transaction.");

        _mint(msg.sender, quantity);
    }

    function fundsWithdraw() external onlyOwner {
        uint256 funds = address(this).balance;
        require(funds > 0, "Insufficient balance.");

        (bool status,) = payable(msg.sender).call{value : funds}("");
        require(status, "Transfer failed.");
    }

    function setFee(uint256 _fee) external onlyOwner {
        fee = _fee;
    }

    function setSupply(uint256 _supply) external onlyOwner {
        supply = _supply;
    }

    function setBaseUri(string memory _newBaseURI) external onlyOwner {
        baseURI = _newBaseURI;
    }
}
